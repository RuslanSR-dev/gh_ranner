#name: UI_Tests
#
#on: [ push ]
#
#env:
#  STAGE: qa
#  BROWSER: chrome
#  LOGIN: ${{ secrets.LOGIN }}
#  PASSWORD: ${{ secrets.PASSWORD }}
#  CI_TOKEN: ${{ secrets.CI_TOKEN }}
#
#jobs:
#  ui_tests:
#    name: Run Tests
#    runs-on: ubuntu-latest
##    container:
##      image: python:3.12-alpine3.20
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Copy gh-pages repo to runner
#        uses: actions/checkout@v2
#        with:
#          ref: gh-pages # Указываем ветку gh-pages
#          path: ./.github/gh-pages # Путь для сохранения файлов
#
#      - name: Prepare Allure environment
#        run: |
#          mkdir -p allure-results # Создаем папку для результатов Allure
#          echo "Branch=${GITHUB_REF_NAME}" > allure-results/environment.properties # Указываем текущую ветку
#          echo "Commit=${GITHUB_SHA}" >> allure-results/environment.properties # Указываем SHA коммита
#          echo "Browser=${{ vars.BROWSER }}" >> allure-results/environment.properties # Браузер из переменных
#          echo "Stage=${{ vars.STAGE }}" >> allure-results/environment.properties # Стадия (Stage) тестов
#          echo "{\"name\": \"GitHub Actions\", \"type\": \"github\", \"url\": \"${{ github.server_url }}/${{ github.repository }}\", \"buildOrder\": ${{ github.run_number }}, \"buildName\": \"${{ github.run_id }}\", \"buildUrl\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\", \"reportUrl\": \"https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/\", \"reportName\": \"Allure Report\"}" > allure-results/executor.json # Добавляем метаданные о сборке
#
#      - name: Set up dependencies
#        run: |
#          apk add --no-cache curl openjdk11-jre
#          curl -o allure-2.13.8.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.13.8/allure-commandline-2.13.8.tgz
#          tar -zxvf allure-2.13.8.tgz -C /opt/
#          ln -s /opt/allure-2.13.8/bin/allure /usr/bin/allure
#          rm allure-2.13.8.tgz
#          apk add curl jq
#          apk update
#          apk add --no-cache chromium chromium-chromedriver tzdata
#          wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
#          wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.30-r0/glibc-2.30-r0.apk
#          wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.30-r0/glibc-bin-2.30-r0.apk
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#
#      - name: Run tests
#        run: |
#          STAGE=dev BROWSER=chrome pytest --alluredir=allure-results --junitxml=test-results/junit.xml || true
#
#      - name: Copy Allure history
#        run: |
#          mkdir -p allure-results/history # Создаем папку history, если она отсутствует
#          if [ -d "./.github/gh-pages/history" ]; then # Проверяем наличие истории
#            cp -R ./.github/gh-pages/history/* allure-results/history/ # Копируем историю
#          fi
#
#      - name: Generate Allure-report
#        env:
#          BROWSER: ${{ vars.BROWSER }} # Браузер из переменных
#          STAGE: ${{ vars.STAGE }} # Стадия (Stage) тестов
#          CI_COMMIT_REF_NAME: ${{ github.ref_name }} # Имя ветки
#          CI_COMMIT_SHORT_SHA: ${{ github.sha }} # SHA коммита
#        run: |
#          allure generate allure-results --clean -o allure-report
#
#      - name: Deploy to Github Pages
#        uses: JamesIves/github-pages-deploy-action@v4
#        with:
#          token: ${{ secrets.CI_TOKEN }} # Токен для аутентификации
#          branch: gh-pages # Ветка для деплоя
#          folder: allure-report # Папка с отчетом
#          clean: false # Не очищаем старый контент


name: Run Tests and Generate Allure Report

on:
  push:
    branches:
      - main # Укажите нужные ветки для запуска

jobs:
  run_tests:
    runs-on: ubuntu-latest
    env:
      STAGE: dev
      BROWSER: chrome
      LOGIN: ${{ secrets.LOGIN }}
      PASSWORD: ${{ secrets.PASSWORD }}
      CI_TOKEN: ${{ secrets.CI_TOKEN }}

    steps:
      # Проверка исходного кода
      - name: Checkout code
        uses: actions/checkout@v3

      # Установка зависимостей и инструментов
      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq chromium-browser chromium-chromedriver openjdk-11-jre
          curl -o allure-2.13.8.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.13.8/allure-commandline-2.13.8.tgz
          tar -zxvf allure-2.13.8.tgz -C /opt/
          sudo ln -s /opt/allure-2.13.8/bin/allure /usr/bin/allure
          rm allure-2.13.8.tgz

      # Установка зависимостей Python
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Запуск тестов
      - name: Run tests
        run: pytest -sv --alluredir=allure-results --junitxml=test-results/junit.xml || true

      # Подготовка истории Allure
      - name: Prepare Allure history
        run: |
          if [ -d "allure-report/history" ]; then
            mkdir -p allure-results/history
            cp -r allure-report/history allure-results/
          else
            echo "No history to restore"
          fi

      # Установка переменных окружения для Allure
      - name: Setup Allure environment variables
        run: |
          echo "Branch=${{ github.ref_name }}" > allure-results/environment.properties
          echo "Commit=${{ github.sha }}" >> allure-results/environment.properties
          echo "{\"name\": \"GitHub Actions\", \"type\": \"github\", \"url\": \"${{ github.repository_url }}\", \"buildOrder\": ${{ github.run_id }}, \"buildName\": \"${{ github.ref_name }}\", \"buildUrl\": \"${{ github.run_url }}\", \"reportUrl\": \"URL отчета\", \"reportName\": \"Отчет о тестировании\"}" > allure-results/executor.json

      # Генерация Allure отчета
      - name: Generate Allure report
        run: allure generate allure-results --clean -o allure-report

      # Деплой отчета в GitHub Pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.CI_TOKEN }}
          branch: gh-pages
          folder: allure-report
          clean: false
