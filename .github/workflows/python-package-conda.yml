name: UI_Tests

on: [ push ]

env:
  STAGE: qa
  BROWSER: chrome
  LOGIN: ${{ secrets.LOGIN }}
  PASSWORD: ${{ secrets.PASSWORD }}
  CI_TOKEN: ${{ secrets.CI_TOKEN }}

jobs:
  ui_tests:
    name: Run Tests
    runs-on: ubuntu-latest
    container:
      image: python:3.12-alpine3.20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Copy gh-pages repo to runner
        uses: actions/checkout@v2
        with:
          ref: gh-pages # Указываем ветку gh-pages
          path: ./.github/gh-pages # Путь для сохранения файлов

      - name: Prepare Allure environment
        run: |
          mkdir -p allure-results # Создаем папку для результатов Allure
          echo "Branch=${GITHUB_REF_NAME}" > allure-results/environment.properties # Указываем текущую ветку
          echo "Commit=${GITHUB_SHA}" >> allure-results/environment.properties # Указываем SHA коммита
          echo "Browser=${{ vars.BROWSER }}" >> allure-results/environment.properties # Браузер из переменных
          echo "Stage=${{ vars.STAGE }}" >> allure-results/environment.properties # Стадия (Stage) тестов
          echo "{\"name\": \"GitHub Actions\", \"type\": \"github\", \"url\": \"${{ github.server_url }}/${{ github.repository }}\", \"buildOrder\": ${{ github.run_number }}, \"buildName\": \"${{ github.run_id }}\", \"buildUrl\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\", \"reportUrl\": \"https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/\", \"reportName\": \"Allure Report\"}" > allure-results/executor.json # Добавляем метаданные о сборке

      - name: Set up dependencies
        run: |
          apk add --no-cache curl openjdk11-jre
          curl -o allure-2.13.8.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.13.8/allure-commandline-2.13.8.tgz
          tar -zxvf allure-2.13.8.tgz -C /opt/
          ln -s /opt/allure-2.13.8/bin/allure /usr/bin/allure
          rm allure-2.13.8.tgz
          apk add curl jq
          apk update
          apk add --no-cache chromium chromium-chromedriver tzdata
          wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
          wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.30-r0/glibc-2.30-r0.apk
          wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.30-r0/glibc-bin-2.30-r0.apk

      - name: Install Git
        run: |
          apt-get update
          apt-get install -y git

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest --alluredir=allure-results --junitxml=test-results.xml || true

      - name: Copy Allure history
        run: |
          mkdir -p allure-results/history # Создаем папку history, если она отсутствует
          if [ -d "./.github/gh-pages/history" ]; then # Проверяем наличие истории
            cp -R ./.github/gh-pages/history/* allure-results/history/ # Копируем историю
          fi

      - name: Generate Allure-report
        env:
          BROWSER: ${{ vars.BROWSER }} # Браузер из переменных
          STAGE: ${{ vars.STAGE }} # Стадия (Stage) тестов
          CI_COMMIT_REF_NAME: ${{ github.ref_name }} # Имя ветки
          CI_COMMIT_SHORT_SHA: ${{ github.sha }} # SHA коммита
        run: |
          allure generate allure-results --clean -o allure-report

      - name: Deploy to Github Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.CI_TOKEN }} # Токен для аутентификации
          branch: gh-pages # Ветка для деплоя
          folder: allure-report # Папка с отчетом
          clean: false # Не очищаем старый контент
